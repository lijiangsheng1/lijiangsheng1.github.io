<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>翻译 on 适兕的博客</title>
    <link>http://lijiangsheng1.github.io/tags/%E7%BF%BB%E8%AF%91/</link>
    <description>Recent content in 翻译 on 适兕的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>Copyright (c) 2016. All rights reserved.</copyright>
    <lastBuildDate>Thu, 12 May 2016 10:39:17 +0800</lastBuildDate>
    <atom:link href="http://lijiangsheng1.github.io/tags/%E7%BF%BB%E8%AF%91/feed/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>自由和开源软件历史上的里程碑：1969～2015</title>
      <link>http://lijiangsheng1.github.io/posts/opensource/milestones_in_free_and_open_source_software_history/</link>
      <pubDate>Thu, 12 May 2016 10:39:17 +0800</pubDate>
      
      <guid>http://lijiangsheng1.github.io/posts/opensource/milestones_in_free_and_open_source_software_history/</guid>
      <description>

&lt;p&gt;原文链接：&lt;a href=&#34;http://thevarguy.com/open-source-application-software-companies/milestones-free-and-open-source-software-history-1969-201#slide-0-field_images-93671&#34;&gt;Milestones in Free and Open Source Software History, 1969-2015&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;题记:cc267de9851301f554ebb623233c0a56&#34;&gt;题记&lt;/h2&gt;

&lt;p&gt;今年是 Linux 内核诞生25周年，非常有必要回顾一下Linux以及相关的开源软件的历史，VAR Guy 斗胆担当起这个责任，以自己的视角切入，回顾这段历史的里程碑：从介绍 Unix 的创建开始到微软拥抱Linux为止。&lt;/p&gt;

&lt;h3 id=&#34;1969年-unix-诞生:cc267de9851301f554ebb623233c0a56&#34;&gt;1969年，Unix 诞生&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://i2.wp.com/alt1040.hipertextual.com/files/2011/10/ritchie-ken.jpg&#34; alt=&#34;unix&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Unix，1969年诞生于 AT&amp;amp;T 贝尔实验室的操作系统，永远也不会是自由或开源的操作系统！但是它的代码被 Unix 社区的 Hacker 们自由的共享着，在20世纪80年代早期 AT&amp;amp;T 将之商业化之前，Hacker 们一直在改进它。也因为此，Unix 成为了自由和开源程序员们试图通过开放代码来复制的操作系统。因此，Unix 为开源奠定了非常重要的基础。&lt;/p&gt;

&lt;h3 id=&#34;1984-gnu-成立:cc267de9851301f554ebb623233c0a56&#34;&gt;1984：GNU 成立&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://i.ebayimg.com/00/s/NTAwWDUwMA==/z/7GsAAOSw5VFWMRP4/$_35.JPG&#34; alt=&#34;gnu&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在1983年的秋天，Richard Stallman ，MIT 人工智能实验室的资深工程师，对于软件闭源日益增长的趋势也越发的不满，于是发起了 GNU 项目。他的目标是仅使用可以自由共享的代码来构建一个 Unix 克隆的操作系统，而且必须永远的公开。绝大多数的 GNU 项目，均是 Stallman 在1984年早些时候开始构建的，它们今天依然处于自由和开源软件生态系统的中心位置。&lt;/p&gt;

&lt;h3 id=&#34;1985年-stallman-创建自由软件基金会:cc267de9851301f554ebb623233c0a56&#34;&gt;1985年，Stallman 创建自由软件基金会&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.vn.nl/wp-content/uploads/sites/3/2015/04/a8658015-57d3-4996-80e2-34aad23fcf25_Christophe-Ducamp_preview-kopie.jpg&#34; alt=&#34;stallman&#34; /&gt;&lt;/p&gt;

&lt;p&gt;尽管 GNU 项目创建以来，能够提供给人们自由的共享代码库了，但是直到1985年，Stallman 创办了自由软件基金会之后，自由代码的在政治维度上才站稳了脚跟。通过帮助和资助自由软件的开发，FSF 在过去的30年为 GNU 项目以及其它自由软件项目提供了重要的基础。它还是帮助自由代码和具有相同目标的社会和政治之间的纽带。&lt;/p&gt;

&lt;h3 id=&#34;1991-bsd-net-2-发布:cc267de9851301f554ebb623233c0a56&#34;&gt;1991, BSD Net/2 发布&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://c1.staticflickr.com/7/6025/6011128252_0d01c3a551_b.jpg&#34; alt=&#34;bsd&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1991年6月，来自加利福尼亚大学伯克利分校的开发者们发布了一款叫做 Net/2 BSD 的操作系统软件，这款软件是可以自由的重新分发的类 Unix 操作系统。关于 BSD 的开发可以追溯到上世纪70年代，在开始的时候是作为为 AT&amp;amp;T Unix 添加一些增强的功能而发起的，随后在80年代时，AT&amp;amp;T Unix 成为一商业产品，然后，BSD 的团队就开始以自由的 BSD 完全取代 AT&amp;amp;T Unix的工作了，Net/2 是 BSD 的第一个版本，基本上实现了这样一个目的。在1991年的夏天，那时的人们还没有听说过 Linux，而 GNU 的开发人员正忙于努力的创建一个内核。BSD 作为一个免费的类 Uni 操作系统，看起来是一颗冉冉升起的新星！前途无量！然而，在发布以后，由于法律上的麻烦（可以说，许多的条款太过于自由主义），BSD 以及其衍生产品从来都&lt;a href=&#34;http://thevarguy.com/open-source-application-software-companies/062615/open-source-history-why-didnt-bsd-beat-out-gnu-and-linux&#34;&gt;没有获得像 GNU／Linux 那样广泛的追随者&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;1991-同一年-linux-内核现身:cc267de9851301f554ebb623233c0a56&#34;&gt;1991，同一年，Linux 内核现身&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://drop.ndtv.com/albums/GADGETS/techies/linux-edited.jpg&#34; alt=&#34;linux&#34; /&gt;&lt;/p&gt;

&lt;p&gt;1991年8月份，一位名叫 Linus Toravalds，尚在读大学的芬兰学生在新闻组上发布了一份声明，他创建了一个类 Unix 操作系统的自由内核。可当时的 Linus 打心眼都没有想到过他写的这个内核，日后被称之为 Linux ，能够吸引众多的精英来一同开发，更没有想到过这最后成为最为成功和著名的自由与开源软件程序。同 GNU 项目所开发出的工具相结合，Linux 获得了空前的成功。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Z.B.: 其实 GNU 自己也有一个内核的项目，叫做 Hurd，但它从来就没有完成过。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&#34;1995-apache-诞生了:cc267de9851301f554ebb623233c0a56&#34;&gt;1995，Apache 诞生了&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.bodenseo.com/images/apache_webserver.png&#34; alt=&#34;apache&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在上世纪90年代早期，Web 渐渐显露峥嵘，但是作为 Web 服务方面的软件还处于封闭、专有的状态。但是在1995年一款软件出现打破了这块铁板。一组由系统管理员组成的开发团队开始协作构建叫做 Apache HTTP 服务器的软件，是基于国家超算应用中心（NCSA）的一款web服务平台，NCSA 后来放弃了他们这款软件的开发人员。Apache 果然顺势而起，没多久就声名鹊起，到1996年的时候，已经占据了 Web 服务器大部分的市场份额。在接下来的几年里，Apache 的开发者们扩大了其支持的平台，支持了更多的由 GNU 许可的软件，当然 Linux 是重中之重。在1999年，成立了 Apache 基金会，旨在为更多的开源软件项目提供监督和帮助。如今的 Apache 已经度过了其17岁的生日，&lt;a href=&#34;http://www.infoq.com/cn/articles/apache-foundation-the-success-of-apache&#34;&gt;以事实证明了它非常的成功！&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&#34;2005-git-的时代来临:cc267de9851301f554ebb623233c0a56&#34;&gt;2005，Git 的时代来临&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://www.atlassian.com/git/images/atlassian-getting-git-right.jpg&#34; alt=&#34;atlassian git&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在上世纪90年代，其中一个让 Linux 连同其它开源项目和 GNU 分离的重要因素就是前者的协作开发是大型的、去中心化的程序员，而后者 GNU 的开发则是在中心化的、较小团队中进行的。在 Linux 最开始的开发过程中协作是通过电子邮件进行的，稍后迁移到了源代码管理（SCM）平台中。Linux 使用的是商业的、叫做 BitKeeper 的SCM一直到2005年，因为平台的所有者称不再为 Linux 提供免费的使用权了，Torvalds 于是写了一款叫做 Git 的SCM工具取代了 BitKeeper。&lt;/p&gt;

&lt;p&gt;从2008年开始，渐渐的出现了一些以Web 的形式托管 Git 代码仓库的平台，如 GitHub。Git 出现推动了开放源代码管理方式，简直是一场革命，它让开发过程前所未有的无限扩展，而且近乎允许让每一个人做贡献！换句话说，Git 将开源编码的开放性带到了更高的高度，可以让任何一个人非常快速的推出一个开源项目，通过 Web 无缝的接受他人的贡献！&lt;/p&gt;

&lt;p&gt;N.B.: 近期，GNU发起了一项关于 Git 托管平台／工具的评测，&lt;a href=&#34;https://www.gnu.org/software/repo-criteria.en.html&#34;&gt;评测标准&lt;/a&gt;，&lt;a href=&#34;https://www.gnu.org/software/repo-criteria-evaluation.html&#34;&gt;评测结果&lt;/a&gt; ，但是颇为遗憾，没有评测&lt;a href=&#34;https://pagure.io/pagure&#34;&gt;Pagure&lt;/a&gt;!&lt;/p&gt;

&lt;h3 id=&#34;2015-微软宣布拥抱-linux:cc267de9851301f554ebb623233c0a56&#34;&gt;2015，微软宣布拥抱 Linux&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://www.digi.no/incoming/2015/02/02/microsoft-elsker-linux.jpg1/alternates/h1080/Microsoft%20elsker%20Linux.jpg&#34; alt=&#34;microsoft&#34; /&gt;&lt;/p&gt;

&lt;p&gt;关于微软和自由／开源软件社区的紧张关系，还得从上世纪90年代后期说起，GNU、Linux、以及 Apache Web 服务器，和其它的开源软件，伴随着互联网的崛起而分割了微软的一些市场份额。更有甚者，在2011年当时任微软 CEO 的  Steve Ballmer 称 Linux 为“致命病毒”。但是，在2015年一切都变了。微软的新任 CEO 公开宣称“微软拥抱Linux”（原文是“Microsoft Love Linux”）。在&lt;a href=&#34;http://www.infoq.com/cn/news/2016/04/Microsoft-Linux-strategy&#34;&gt;回顾微软近年来对于Linux和开源的策略&lt;/a&gt;一文中，我总结了一下这几年微软整合开源产品的几件大事件，就可以看出微软这次是动真格的了，尽管来自开源社区的忠实爱好者们&lt;a href=&#34;http://thevarguy.com/open-source-application-software-companies/microsoft-loves-linux-does-linux-love-microsoft&#34;&gt;仍然在怀疑微软的态度&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;作者简介:cc267de9851301f554ebb623233c0a56&#34;&gt;作者简介&lt;/h2&gt;

&lt;p&gt;Christopher Tozzi，The VAR Guy 的自由编辑，从2008年到现在一直担任一些频道的主编。频道有：开源、Linux、虚拟化、SDN，以及容器、数据存储等相关主题。他在华盛顿大学讲授历史课程，他还偶尔会结合这些来写软件的历史。他的新作《 For Fun and Profit: A History of the Free and Open Source Software Revolution, 》即将由 MIT 出版社出版。他的个人主页：&lt;a href=&#34;http://christozzi.com/index.php&#34;&gt;christozzi.com&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;译者点评:cc267de9851301f554ebb623233c0a56&#34;&gt;译者点评&lt;/h2&gt;

&lt;p&gt;其实，类似这样的大事件式的历史叙事方式，我是非常的不喜欢。而且容易被误解。这要回归到我们中学所学的历史课，尽挑大事说，忽略了每一个活生生的个人史。导致多数人都有宏观视野，这一点可以在夏天的街边地摊，随意找个只要有三、两人聚在一起，你在旁边聆听即可，尽是皇帝视野、宏观叙事、人多无力、历朝历代等等。之所以翻译这篇，是因为看到作者是一名历史学家，竟然写了一本关于自由和开源软件的历史书，只希望从他的脉络中找到一些什么。关于 Christopher Tozzi 的文章，我可能还会翻译几篇。若是能拜读了他的书，他的历史叙事又不同于列举里程碑的话，我希望能够翻译，从中学习一些文化、技术、沟通、管理等细节。&lt;/p&gt;

&lt;p&gt;N.B.：似乎有微博上&lt;a href=&#34;http://weibo.com/u/5242649983&#34;&gt;湾区日报&lt;/a&gt;的风格。这究竟是一种什么样的现象？值得深思！有机会的话，应专门写一篇文章解释为什么这么干。不用管这个世界，表达出自己的内心即可。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么说你的员工应该去为开源做贡献</title>
      <link>http://lijiangsheng1.github.io/posts/opensource/why_employees_should_be_contributing_to_open_source/</link>
      <pubDate>Fri, 06 May 2016 18:33:47 +0800</pubDate>
      
      <guid>http://lijiangsheng1.github.io/posts/opensource/why_employees_should_be_contributing_to_open_source/</guid>
      <description>

&lt;p&gt;英文原文：&lt;a href=&#34;https://blog.codeship.com/why-your-employees-should-be-contributing-to-open-source/&#34;&gt;Why Your Employees Should Be Contributing to Open Source&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;译者写在前面的话:fe751cbe31a214529158a041c9ece16b&#34;&gt;译者写在前面的话&lt;/h2&gt;

&lt;p&gt;就&lt;a href=&#34;http://lijiangsheng1.github.io/about/&#34;&gt;我来说&lt;/a&gt;，在职业生涯中，就说服老板参与到开源社区中是非常失败的，甚至于最后均是不欢而散。那么如果当初我也能像作者一样，以平和的心态、严谨的数据、耐心的说服，结果可能会好点。年少轻狂之时，只注重自己的内心世界，认为不懂的可以通过努力去获取，而忘却了这个世界的复杂，他人是否愿意学习？他人也是有许多经历和接受了许多文化、意识形态的。改变自己可以，想要改变别人是不可能的，哪怕是影响都微乎其微。现在的我，看人要谨慎许多，在头脑充血的那一刻，尽可能的去做深呼吸。然后，再以理服人。&lt;/p&gt;

&lt;p&gt;相信这篇文章对于每个热爱开源，对开源充满美好憧憬的年轻人，依然还在为他人打工的有志者。说服自己的老板、或者是为开源尽一份力。是有一定用处的。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;多数老板是不乐意员工在工作时间去为开源做任何的贡献的，他们想不明白为外部的开源项目做贡献如何能够让他们自身以及他们的客户受益？&lt;/p&gt;

&lt;p&gt;只有为数不多的公司会鼓励他们的开发团队去为开源做贡献。所以有很多做开源项目的开发者都是在白天下班之后，但是这样就会经常的熬夜，会对健康造成严重损害的。 这样的话，就将很大一部分优秀的开发者们排除在外了，如有了孩子的父母、或者是家里有正在上学的孩子，这些开发者们就没有时间参与到开源项目中，即使是对所有人都有好处：他自己、其老板、乃至他的客户。&lt;/p&gt;

&lt;p&gt;非常遗憾，老板、员工、以及客户，都没有意识到自己错过的机会。&lt;/p&gt;

&lt;p&gt;多数雇主或老板仍然将软件的开发视为和在墙上涂鸦是一样的。&lt;strong&gt;如果我增加更多的工人，那么完成工作任务的时间就会线性的减少。&lt;/strong&gt; 在某种程度上，这样做是对的，但是它并不适用于软件项目。打造一款软件产品，在整个技术栈区分多个不同的层次，每个层次都需要不同的技术。驾驭复杂的软件取决于团队掌握的知识以及团队成员的相互协作。&lt;/p&gt;

&lt;p&gt;如果一些经理们对于自己的雇员们在日常工作时间为开源做贡献有所担心的话，他们一定是这么考虑的：“为什么我们花钱雇佣工人为他家的墙上涂鸦了呢？” 本文试图解决经理们的这一疑惑。将探讨为什么说让员工们为开源做贡献好处多多－－即使是在日常的工作时间去做这件事。&lt;/p&gt;

&lt;h2 id=&#34;开源可以留住员工:fe751cbe31a214529158a041c9ece16b&#34;&gt;开源可以留住员工&lt;/h2&gt;

&lt;p&gt;开源是一个学习的绝佳之地。每个项目都有各自的结构、工具、特点、和流程。参与到开源项目是最佳学习其内部机理的方式。&lt;/p&gt;

&lt;p&gt;他们使用哪款工具？其它团队是什么样的流程？通过参与开源，工程师们可以深入了解其它的高端项目，而不是等待某些许可方可进行参与。&lt;/p&gt;

&lt;h2 id=&#34;开源对团队有好处:fe751cbe31a214529158a041c9ece16b&#34;&gt;开源对团队有好处&lt;/h2&gt;

&lt;p&gt;如今，很多的商业项目都严重依赖于开源软件。其中一些 Bug 和特殊用例只能在大型的、巨大流量的部署中发生。在这样的情况下，我们需要专家能够及时的修复问题，问题根源的分析只有让对所使用的技术和程序内部有深刻了解的团队去解决，才能更快。他们毋需依赖其它项目的维护者，就可以自行去解决问题。&lt;/p&gt;

&lt;p&gt;一位贡献者（代码提交者）本身就是解决问题的能手，若是能够在团队内部，做到日常的回答其他工程师的小问题，做到为他人提供指导，这样整个团队就可加速成长，进入一个正循环的高效团队，从公司的角度来讲，可提升业务。&lt;/p&gt;

&lt;h2 id=&#34;有助于员工的培训发展:fe751cbe31a214529158a041c9ece16b&#34;&gt;有助于员工的培训发展&lt;/h2&gt;

&lt;p&gt;每家公司都希望雇佣到市场上那些受过最好的教育、拥有高超技能的工程师。但是现实是非常困难的，大多数的时候是需要自己来培养优秀的工程师的。正如我在上面所提到的，那些参与多个开源项目贡献的卓越的工程师是不会换老板的，他们在开源项目所锻炼出来的技能、知识、以及经验要比仅仅是自己公司那点狭小的空间所积累的要快太多了。开源可以有效的增长工程师的技术和领导力，这是大家都有目共睹的。&lt;/p&gt;

&lt;h2 id=&#34;开源可以作为一个很好的演练场地:fe751cbe31a214529158a041c9ece16b&#34;&gt;开源可以作为一个很好的演练场地&lt;/h2&gt;

&lt;p&gt;一些开发者们拥有自己的、小规模的演练场地，还有一些开发者为大型项目贡献目的“仅仅是为了好玩”，无论是那种情况，对于绝大多数的工程师们来说，开源是他们演练场地的不二之选。那么找一个演练场地究竟有何好处了呢？&lt;/p&gt;

&lt;p&gt;演练场地是尝试新的概念和模式的最佳场地。而往往这个演练场地是开放源代码的话，就可以很容易的获得高手们的反馈，代码就可以在各种沟通的地方，如小型聚会、大型研讨会、乃至在线IRC等。&lt;/p&gt;

&lt;p&gt;来自其它公司的工程师带来不同的背景以及用例，通过这种方式，他们可以获得更深层次的洞见。多样化的组织往往会比一个公司内部单一的团队能够达到更好的效果。&lt;/p&gt;

&lt;h2 id=&#34;开源可以激励士气:fe751cbe31a214529158a041c9ece16b&#34;&gt;开源可以激励士气&lt;/h2&gt;

&lt;p&gt;公司让其员工在工作时间参与到开源项目中，是绝对有益处的：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;我们获得了学习和发展新技能的时间。&lt;/li&gt;
&lt;li&gt;我们出色的工作，终将会被更广泛的其它公司或个人所了解，而不仅仅限于自己的内部。&lt;/li&gt;
&lt;li&gt;我们可以很容易的和其它公司的工程师们一起讨论代码、设计思路等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在办公时间内让工程师去参与到开源社区中，那就是这个时间段内有大量的社区开发人员们都在线。另外，在当今的竞争激烈的市场中，能够得到免费的宣传非常的不容易了。更何况还能找到优秀的人才。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;译者注： 此处应特别针对中国的开发者，美国的开发者们依然在开源项目中的占绝大多数。所以时差的关系，中国地区的程序员们，和老板带来的挑战有多了一重障碍。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;对于每个项目都有好处:fe751cbe31a214529158a041c9ece16b&#34;&gt;对于每个项目都有好处&lt;/h2&gt;

&lt;p&gt;一些工程师为某深奥的编程语言实现解析器的功能，原因只是为了好玩。还有一些工程师，实现了一个让人们画 8-bit 的艺术画作的网站。每一位参与到开源的人，都会被开源的积极因素感染以及间接的影响。只是在刚参与的时候，表面上看起来这些积极的影响不够明显罢了。&lt;/p&gt;

&lt;p&gt;我以我的工作为例和大家分享一下，我的工作是开发数据库以及它的管理界面。数据库拥有 HTTP API：如果你将一份文档存入到数据库，随后你可以使用一个独特的 URL 来进行访问。&lt;/p&gt;

&lt;p&gt;在过去的一年里，我们收到了几份关于我们用户界面的一些的 Bug，如用户创建了文档，但是却无法使用 HTTP 来打开它们。当我们自以为解决了这个 Bug 的时候，它却又在意想不到的地方再次发生。最终找到了问题的根源，那就是产生此 Bug 是因为使用了特殊的字符，所以我们假设使用了一个错误的编码。但是，另外一个团队解决了此问题，使用16进制的RFC就可正常工作。&lt;/p&gt;

&lt;p&gt;看起来似乎和我所从事的数据库没有任何关系，但是它影响到了用户，具体表现还是数据库的问题。于是我参与了另外一个开源项目：&lt;a href=&#34;https://whatwg.org/&#34;&gt;WHATWG&lt;/a&gt;，这是一个用户终端标准的编辑器。终端标准则是尝试将不同浏览器中的终端给标准化了。Web 标准可是现代web的基石。&lt;/p&gt;

&lt;p&gt;这对于我本身的有关数据库的工作有何好处？好问题！当我开始做这件事的时候我并没有想过太多的益处，但是在几个星期之后，一个意想不到的效果出现了：我们又接到了同样的问题的报告，此问题是我几个星期前就创建的，而且还链接到了RFC，这次，我则为之增加了更多的细节：验证、算法、实例、 RFC 的部分以及 WHATWG 实现的笔记等。&lt;/p&gt;

&lt;p&gt;一个看起来和我的工作无关的项目，但是却对我的日常工作有着频繁的、间接的影响。这很好的解释了一个完全无关的项目可以让公司产生积极的影响。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;译者注：开源是一个具有生命力的世界，由无数的细小的项目所组成，需要以生态系统的眼光来看待。举个例子，去年爆发的 heartbleed 安全漏洞，影响的站点何止千万？但是 OpenSSL 在没有爆发之前，又有多少人关注？ Linux 所用到的库，应用基于 Linux 编写，使用到了 Linux 内核的某些功能等等不胜枚举。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;总结:fe751cbe31a214529158a041c9ece16b&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;支持开源对于雇主来说是好处多多的，项目中所参与的每一位都有益处，不仅仅是指开发者，还包括客户和雇主。目前来说，依然还有很多开发者参与开源是在晚上和周末这个时间段进行的。这其实对于他们的健康来说非常的不好，而且也不可能长期这样下去。这对开源的长远发展来说不是一件好的事情。仅仅只有少数几个公司意识到了花钱雇佣开源的开发者是很有价值的，这些公司会让自己的员工全职为开源做贡献。&lt;/p&gt;

&lt;p&gt;对于你来说，一个想要改变目前困境的好的办法就是去找管理层去谈谈，给他们看看这篇文章，或者是做一些幻灯片的演示。建议以一些小型的实验开始，比如说在你自己的团队设一个有几个月期限的实验，说不定公司看到诸般好处之后，会让大家利用20%的时间去直接参与到开源了呢。当然你要做到不断的提供、有理有据的反馈，尤其是管理者们比较关心的。在你的团队里要分享，无论是那些积极的，还是所谓的消极的影响。&lt;/p&gt;

&lt;p&gt;我非常的肯定，长远来说积极的因素要远远多于消极的因素。管理者会看到这其中的益处的。然后会在整个公司范围内支持你的观点。这样我们就有了改变我们所为之工作的公司的机会，不用担心，我就是刚刚这么干的，而且还很成功。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;译者写在翻译完成之后:fe751cbe31a214529158a041c9ece16b&#34;&gt;译者写在翻译完成之后&lt;/h2&gt;

&lt;p&gt;就国内的情况而言，不容乐观。仍然是文化的问题。大部分的雇主和中、高层经理的思路是：“哦，我花钱培养了两、三年，让其在社区混出个名堂了，然后有人高薪挖走了，公司和我付出的心血全部付之东流。” 这是一个死结，非常的难解：&lt;/p&gt;

&lt;p&gt;0、面对高薪的诱惑，对硅谷文化的曲解，视职业道德为无物。另外国内的环境对于诚信、推荐信之类的机制为空白。&lt;/p&gt;

&lt;p&gt;1、企业降低不了自己的身段，社会主义国企思路，对于自己员工在社区表现没有科学的考核，以及相应的激励机制。&lt;/p&gt;

&lt;p&gt;另外，本文是典型的工程师思维，可能这样的话语很难让非工程师出身的高管们看懂或理解。可能加上管理和营销的角度，会更具说服力。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>